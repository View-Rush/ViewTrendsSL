# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PredictionResponseRecommendationsInner(BaseModel):
    """
    PredictionResponseRecommendationsInner
    """ # noqa: E501
    type: Optional[StrictStr] = None
    priority: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    impact: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type", "priority", "message", "impact"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('title', 'timing', 'tags', 'thumbnail',):
            raise ValueError("must be one of enum values ('title', 'timing', 'tags', 'thumbnail')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('high', 'medium', 'low',):
            raise ValueError("must be one of enum values ('high', 'medium', 'low')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PredictionResponseRecommendationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PredictionResponseRecommendationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "priority": obj.get("priority"),
            "message": obj.get("message"),
            "impact": obj.get("impact")
        })
        return _obj


