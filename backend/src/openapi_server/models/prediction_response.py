# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_server.models.prediction_response_confidence_interval import PredictionResponseConfidenceInterval
from openapi_server.models.prediction_response_factor_contributions import PredictionResponseFactorContributions
from openapi_server.models.prediction_response_recommendations_inner import PredictionResponseRecommendationsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PredictionResponse(BaseModel):
    """
    PredictionResponse
    """ # noqa: E501
    prediction_id: Optional[StrictStr] = Field(default=None, alias="predictionId")
    predicted_views: Optional[StrictInt] = Field(default=None, alias="predictedViews")
    confidence_interval: Optional[PredictionResponseConfidenceInterval] = Field(default=None, alias="confidenceInterval")
    confidence_score: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Model confidence percentage", alias="confidenceScore")
    factor_contributions: Optional[PredictionResponseFactorContributions] = Field(default=None, alias="factorContributions")
    recommendations: Optional[List[PredictionResponseRecommendationsInner]] = None
    best_publish_time: Optional[datetime] = Field(default=None, alias="bestPublishTime")
    suggested_tags: Optional[List[StrictStr]] = Field(default=None, alias="suggestedTags")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    __properties: ClassVar[List[str]] = ["predictionId", "predictedViews", "confidenceInterval", "confidenceScore", "factorContributions", "recommendations", "bestPublishTime", "suggestedTags", "createdAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PredictionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confidence_interval
        if self.confidence_interval:
            _dict['confidenceInterval'] = self.confidence_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factor_contributions
        if self.factor_contributions:
            _dict['factorContributions'] = self.factor_contributions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations (list)
        _items = []
        if self.recommendations:
            for _item in self.recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recommendations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PredictionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "predictionId": obj.get("predictionId"),
            "predictedViews": obj.get("predictedViews"),
            "confidenceInterval": PredictionResponseConfidenceInterval.from_dict(obj.get("confidenceInterval")) if obj.get("confidenceInterval") is not None else None,
            "confidenceScore": obj.get("confidenceScore"),
            "factorContributions": PredictionResponseFactorContributions.from_dict(obj.get("factorContributions")) if obj.get("factorContributions") is not None else None,
            "recommendations": [PredictionResponseRecommendationsInner.from_dict(_item) for _item in obj.get("recommendations")] if obj.get("recommendations") is not None else None,
            "bestPublishTime": obj.get("bestPublishTime"),
            "suggestedTags": obj.get("suggestedTags"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


