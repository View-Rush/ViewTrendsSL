# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    avatar: Optional[StrictStr] = None
    bio: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    last_login_at: Optional[datetime] = Field(default=None, alias="lastLoginAt")
    email_verified: Optional[StrictBool] = Field(default=None, alias="emailVerified")
    credits: Optional[StrictInt] = Field(default=None, description="Remaining prediction credits")
    plan: Optional[StrictStr] = None
    has_connected_channel: Optional[StrictBool] = Field(default=None, alias="hasConnectedChannel")
    __properties: ClassVar[List[str]] = ["id", "email", "fullName", "avatar", "bio", "timezone", "createdAt", "lastLoginAt", "emailVerified", "credits", "plan", "hasConnectedChannel"]

    @field_validator('plan')
    def plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('free', 'basic', 'pro', 'enterprise',):
            raise ValueError("must be one of enum values ('free', 'basic', 'pro', 'enterprise')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if avatar (nullable) is None
        # and model_fields_set contains the field
        if self.avatar is None and "avatar" in self.model_fields_set:
            _dict['avatar'] = None

        # set to None if bio (nullable) is None
        # and model_fields_set contains the field
        if self.bio is None and "bio" in self.model_fields_set:
            _dict['bio'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "fullName": obj.get("fullName"),
            "avatar": obj.get("avatar"),
            "bio": obj.get("bio"),
            "timezone": obj.get("timezone"),
            "createdAt": obj.get("createdAt"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "emailVerified": obj.get("emailVerified"),
            "credits": obj.get("credits"),
            "plan": obj.get("plan"),
            "hasConnectedChannel": obj.get("hasConnectedChannel")
        })
        return _obj


