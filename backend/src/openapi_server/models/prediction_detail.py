# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_server.models.prediction_detail_all_of_channel_info import PredictionDetailAllOfChannelInfo
from openapi_server.models.prediction_detail_all_of_factor_contributions import PredictionDetailAllOfFactorContributions
from openapi_server.models.prediction_detail_all_of_recommendations import PredictionDetailAllOfRecommendations
from openapi_server.models.prediction_detail_all_of_views_timeline import PredictionDetailAllOfViewsTimeline
from openapi_server.models.prediction_response_confidence_interval import PredictionResponseConfidenceInterval
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PredictionDetail(BaseModel):
    """
    PredictionDetail
    """ # noqa: E501
    id: Optional[StrictStr] = None
    video_title: Optional[StrictStr] = Field(default=None, alias="videoTitle")
    category: Optional[StrictStr] = None
    predicted_views: Optional[StrictInt] = Field(default=None, alias="predictedViews")
    actual_views: Optional[StrictInt] = Field(default=None, alias="actualViews")
    accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Accuracy percentage (only if actualViews is available)")
    status: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    video_description: Optional[StrictStr] = Field(default=None, alias="videoDescription")
    video_duration: Optional[StrictInt] = Field(default=None, alias="videoDuration")
    tags: Optional[List[StrictStr]] = None
    channel_info: Optional[PredictionDetailAllOfChannelInfo] = Field(default=None, alias="channelInfo")
    confidence_interval: Optional[PredictionResponseConfidenceInterval] = Field(default=None, alias="confidenceInterval")
    confidence_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="confidenceScore")
    factor_contributions: Optional[PredictionDetailAllOfFactorContributions] = Field(default=None, alias="factorContributions")
    recommendations: Optional[List[PredictionDetailAllOfRecommendations]] = None
    views_timeline: Optional[List[PredictionDetailAllOfViewsTimeline]] = Field(default=None, description="Daily view count if tracking is enabled", alias="viewsTimeline")
    notes: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "videoTitle", "category", "predictedViews", "actualViews", "accuracy", "status", "createdAt", "publishedAt", "videoDescription", "videoDuration", "tags", "channelInfo", "confidenceInterval", "confidenceScore", "factorContributions", "recommendations", "viewsTimeline", "notes", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('pending', 'tracking', 'completed',):
            raise ValueError("must be one of enum values ('pending', 'tracking', 'completed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PredictionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of channel_info
        if self.channel_info:
            _dict['channelInfo'] = self.channel_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of confidence_interval
        if self.confidence_interval:
            _dict['confidenceInterval'] = self.confidence_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factor_contributions
        if self.factor_contributions:
            _dict['factorContributions'] = self.factor_contributions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations (list)
        _items = []
        if self.recommendations:
            for _item in self.recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in views_timeline (list)
        _items = []
        if self.views_timeline:
            for _item in self.views_timeline:
                if _item:
                    _items.append(_item.to_dict())
            _dict['viewsTimeline'] = _items
        # set to None if actual_views (nullable) is None
        # and model_fields_set contains the field
        if self.actual_views is None and "actual_views" in self.model_fields_set:
            _dict['actualViews'] = None

        # set to None if accuracy (nullable) is None
        # and model_fields_set contains the field
        if self.accuracy is None and "accuracy" in self.model_fields_set:
            _dict['accuracy'] = None

        # set to None if published_at (nullable) is None
        # and model_fields_set contains the field
        if self.published_at is None and "published_at" in self.model_fields_set:
            _dict['publishedAt'] = None

        # set to None if video_description (nullable) is None
        # and model_fields_set contains the field
        if self.video_description is None and "video_description" in self.model_fields_set:
            _dict['videoDescription'] = None

        # set to None if views_timeline (nullable) is None
        # and model_fields_set contains the field
        if self.views_timeline is None and "views_timeline" in self.model_fields_set:
            _dict['viewsTimeline'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PredictionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "videoTitle": obj.get("videoTitle"),
            "category": obj.get("category"),
            "predictedViews": obj.get("predictedViews"),
            "actualViews": obj.get("actualViews"),
            "accuracy": obj.get("accuracy"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "publishedAt": obj.get("publishedAt"),
            "videoDescription": obj.get("videoDescription"),
            "videoDuration": obj.get("videoDuration"),
            "tags": obj.get("tags"),
            "channelInfo": PredictionDetailAllOfChannelInfo.from_dict(obj.get("channelInfo")) if obj.get("channelInfo") is not None else None,
            "confidenceInterval": PredictionResponseConfidenceInterval.from_dict(obj.get("confidenceInterval")) if obj.get("confidenceInterval") is not None else None,
            "confidenceScore": obj.get("confidenceScore"),
            "factorContributions": PredictionDetailAllOfFactorContributions.from_dict(obj.get("factorContributions")) if obj.get("factorContributions") is not None else None,
            "recommendations": [PredictionDetailAllOfRecommendations.from_dict(_item) for _item in obj.get("recommendations")] if obj.get("recommendations") is not None else None,
            "viewsTimeline": [PredictionDetailAllOfViewsTimeline.from_dict(_item) for _item in obj.get("viewsTimeline")] if obj.get("viewsTimeline") is not None else None,
            "notes": obj.get("notes"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


