# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_server.models.prediction_request_channel_info import PredictionRequestChannelInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PredictionRequest(BaseModel):
    """
    PredictionRequest
    """ # noqa: E501
    video_title: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(alias="videoTitle")
    video_description: Optional[Annotated[str, Field(strict=True, max_length=5000)]] = Field(default=None, alias="videoDescription")
    video_duration: Annotated[int, Field(strict=True, ge=1)] = Field(description="Video duration in seconds", alias="videoDuration")
    category: StrictStr
    tags: Optional[Annotated[List[StrictStr], Field(max_length=15)]] = None
    channel_info: Optional[PredictionRequestChannelInfo] = Field(default=None, alias="channelInfo")
    publish_date_time: Optional[datetime] = Field(default=None, description="Expected publish date and time", alias="publishDateTime")
    thumbnail_quality: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=None, description="Thumbnail quality score", alias="thumbnailQuality")
    has_custom_thumbnail: Optional[StrictBool] = Field(default=None, alias="hasCustomThumbnail")
    language: Optional[StrictStr] = None
    content_type: Optional[StrictStr] = Field(default=None, alias="contentType")
    target_audience: Optional[StrictStr] = Field(default=None, alias="targetAudience")
    is_seasonal: Optional[StrictBool] = Field(default=None, alias="isSeasonal")
    is_trending: Optional[StrictBool] = Field(default=None, alias="isTrending")
    promotional_budget: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Promotional budget in USD", alias="promotionalBudget")
    __properties: ClassVar[List[str]] = ["videoTitle", "videoDescription", "videoDuration", "category", "tags", "channelInfo", "publishDateTime", "thumbnailQuality", "hasCustomThumbnail", "language", "contentType", "targetAudience", "isSeasonal", "isTrending", "promotionalBudget"]

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('original', 'commentary', 'tutorial', 'review', 'vlog', 'entertainment', 'other',):
            raise ValueError("must be one of enum values ('original', 'commentary', 'tutorial', 'review', 'vlog', 'entertainment', 'other')")
        return value

    @field_validator('target_audience')
    def target_audience_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('kids', 'teens', 'adults', 'all',):
            raise ValueError("must be one of enum values ('kids', 'teens', 'adults', 'all')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PredictionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of channel_info
        if self.channel_info:
            _dict['channelInfo'] = self.channel_info.to_dict()
        # set to None if video_description (nullable) is None
        # and model_fields_set contains the field
        if self.video_description is None and "video_description" in self.model_fields_set:
            _dict['videoDescription'] = None

        # set to None if promotional_budget (nullable) is None
        # and model_fields_set contains the field
        if self.promotional_budget is None and "promotional_budget" in self.model_fields_set:
            _dict['promotionalBudget'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PredictionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "videoTitle": obj.get("videoTitle"),
            "videoDescription": obj.get("videoDescription"),
            "videoDuration": obj.get("videoDuration"),
            "category": obj.get("category"),
            "tags": obj.get("tags"),
            "channelInfo": PredictionRequestChannelInfo.from_dict(obj.get("channelInfo")) if obj.get("channelInfo") is not None else None,
            "publishDateTime": obj.get("publishDateTime"),
            "thumbnailQuality": obj.get("thumbnailQuality"),
            "hasCustomThumbnail": obj.get("hasCustomThumbnail"),
            "language": obj.get("language"),
            "contentType": obj.get("contentType"),
            "targetAudience": obj.get("targetAudience"),
            "isSeasonal": obj.get("isSeasonal"),
            "isTrending": obj.get("isTrending"),
            "promotionalBudget": obj.get("promotionalBudget")
        })
        return _obj


