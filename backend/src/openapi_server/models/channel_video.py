# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChannelVideo(BaseModel):
    """
    ChannelVideo
    """ # noqa: E501
    video_id: Optional[StrictStr] = Field(default=None, alias="videoId")
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    thumbnail: Optional[StrictStr] = None
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    duration: Optional[StrictInt] = Field(default=None, description="Duration in seconds")
    view_count: Optional[StrictInt] = Field(default=None, alias="viewCount")
    like_count: Optional[StrictInt] = Field(default=None, alias="likeCount")
    comment_count: Optional[StrictInt] = Field(default=None, alias="commentCount")
    has_prediction: Optional[StrictBool] = Field(default=None, alias="hasPrediction")
    prediction_id: Optional[StrictStr] = Field(default=None, alias="predictionId")
    __properties: ClassVar[List[str]] = ["videoId", "title", "description", "thumbnail", "publishedAt", "duration", "viewCount", "likeCount", "commentCount", "hasPrediction", "predictionId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChannelVideo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if prediction_id (nullable) is None
        # and model_fields_set contains the field
        if self.prediction_id is None and "prediction_id" in self.model_fields_set:
            _dict['predictionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChannelVideo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "videoId": obj.get("videoId"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "thumbnail": obj.get("thumbnail"),
            "publishedAt": obj.get("publishedAt"),
            "duration": obj.get("duration"),
            "viewCount": obj.get("viewCount"),
            "likeCount": obj.get("likeCount"),
            "commentCount": obj.get("commentCount"),
            "hasPrediction": obj.get("hasPrediction"),
            "predictionId": obj.get("predictionId")
        })
        return _obj


