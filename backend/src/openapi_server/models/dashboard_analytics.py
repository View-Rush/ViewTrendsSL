# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.dashboard_analytics_accuracy_trend_inner import DashboardAnalyticsAccuracyTrendInner
from openapi_server.models.dashboard_analytics_overview import DashboardAnalyticsOverview
from openapi_server.models.dashboard_analytics_top_categories_inner import DashboardAnalyticsTopCategoriesInner
from openapi_server.models.prediction_summary import PredictionSummary
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DashboardAnalytics(BaseModel):
    """
    DashboardAnalytics
    """ # noqa: E501
    overview: Optional[DashboardAnalyticsOverview] = None
    recent_predictions: Optional[Annotated[List[PredictionSummary], Field(max_length=10)]] = Field(default=None, alias="recentPredictions")
    top_categories: Optional[Annotated[List[DashboardAnalyticsTopCategoriesInner], Field(max_length=5)]] = Field(default=None, alias="topCategories")
    accuracy_trend: Optional[List[DashboardAnalyticsAccuracyTrendInner]] = Field(default=None, alias="accuracyTrend")
    __properties: ClassVar[List[str]] = ["overview", "recentPredictions", "topCategories", "accuracyTrend"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DashboardAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of overview
        if self.overview:
            _dict['overview'] = self.overview.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_predictions (list)
        _items = []
        if self.recent_predictions:
            for _item in self.recent_predictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recentPredictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_categories (list)
        _items = []
        if self.top_categories:
            for _item in self.top_categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['topCategories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in accuracy_trend (list)
        _items = []
        if self.accuracy_trend:
            for _item in self.accuracy_trend:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accuracyTrend'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DashboardAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "overview": DashboardAnalyticsOverview.from_dict(obj.get("overview")) if obj.get("overview") is not None else None,
            "recentPredictions": [PredictionSummary.from_dict(_item) for _item in obj.get("recentPredictions")] if obj.get("recentPredictions") is not None else None,
            "topCategories": [DashboardAnalyticsTopCategoriesInner.from_dict(_item) for _item in obj.get("topCategories")] if obj.get("topCategories") is not None else None,
            "accuracyTrend": [DashboardAnalyticsAccuracyTrendInner.from_dict(_item) for _item in obj.get("accuracyTrend")] if obj.get("accuracyTrend") is not None else None
        })
        return _obj


