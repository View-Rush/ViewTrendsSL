# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.channel_analytics_demographics import ChannelAnalyticsDemographics
from openapi_server.models.channel_analytics_metrics import ChannelAnalyticsMetrics
from openapi_server.models.channel_analytics_timeline_inner import ChannelAnalyticsTimelineInner
from openapi_server.models.channel_analytics_top_videos_inner import ChannelAnalyticsTopVideosInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChannelAnalytics(BaseModel):
    """
    ChannelAnalytics
    """ # noqa: E501
    period: Optional[StrictStr] = None
    metrics: Optional[ChannelAnalyticsMetrics] = None
    timeline: Optional[List[ChannelAnalyticsTimelineInner]] = None
    top_videos: Optional[Annotated[List[ChannelAnalyticsTopVideosInner], Field(max_length=10)]] = Field(default=None, alias="topVideos")
    demographics: Optional[ChannelAnalyticsDemographics] = None
    __properties: ClassVar[List[str]] = ["period", "metrics", "timeline", "topVideos", "demographics"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChannelAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in timeline (list)
        _items = []
        if self.timeline:
            for _item in self.timeline:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeline'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_videos (list)
        _items = []
        if self.top_videos:
            for _item in self.top_videos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['topVideos'] = _items
        # override the default output from pydantic by calling `to_dict()` of demographics
        if self.demographics:
            _dict['demographics'] = self.demographics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChannelAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "period": obj.get("period"),
            "metrics": ChannelAnalyticsMetrics.from_dict(obj.get("metrics")) if obj.get("metrics") is not None else None,
            "timeline": [ChannelAnalyticsTimelineInner.from_dict(_item) for _item in obj.get("timeline")] if obj.get("timeline") is not None else None,
            "topVideos": [ChannelAnalyticsTopVideosInner.from_dict(_item) for _item in obj.get("topVideos")] if obj.get("topVideos") is not None else None,
            "demographics": ChannelAnalyticsDemographics.from_dict(obj.get("demographics")) if obj.get("demographics") is not None else None
        })
        return _obj


