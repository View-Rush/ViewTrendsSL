# coding: utf-8

"""
    ViewPredict AI - YouTube View Count Prediction API

    Complete API for YouTube view count prediction platform with user authentication,  prediction management, analytics, and channel integration. 

    The version of the OpenAPI document: 1.0.0
    Contact: support@viewpredict.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Notification(BaseModel):
    """
    Notification
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    data: Optional[Dict[str, Any]] = None
    read: Optional[StrictBool] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    read_at: Optional[datetime] = Field(default=None, alias="readAt")
    action_url: Optional[StrictStr] = Field(default=None, alias="actionUrl")
    __properties: ClassVar[List[str]] = ["id", "type", "title", "message", "data", "read", "createdAt", "readAt", "actionUrl"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('prediction_complete', 'accuracy_milestone', 'weekly_summary', 'system', 'channel_sync',):
            raise ValueError("must be one of enum values ('prediction_complete', 'accuracy_milestone', 'weekly_summary', 'system', 'channel_sync')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if read_at (nullable) is None
        # and model_fields_set contains the field
        if self.read_at is None and "read_at" in self.model_fields_set:
            _dict['readAt'] = None

        # set to None if action_url (nullable) is None
        # and model_fields_set contains the field
        if self.action_url is None and "action_url" in self.model_fields_set:
            _dict['actionUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "title": obj.get("title"),
            "message": obj.get("message"),
            "data": obj.get("data"),
            "read": obj.get("read"),
            "createdAt": obj.get("createdAt"),
            "readAt": obj.get("readAt"),
            "actionUrl": obj.get("actionUrl")
        })
        return _obj


